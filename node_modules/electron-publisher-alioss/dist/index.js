"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ali_oss_1 = __importDefault(require("ali-oss"));
const builder_util_1 = require("builder-util");
const electron_publish_1 = require("electron-publish");
// import { createReadStream } from 'fs-extra-p';
const path_1 = require("path");
class AliOssPublisher extends electron_publish_1.HttpPublisher {
    constructor(context, publishConfig, useSafeArtifactName) {
        super(context);
        this.providerName = 'alioss';
        this.useSafeName = true;
        // const config = this.getConfig();
        this.useSafeName = useSafeArtifactName || true;
        let config = publishConfig;
        if (publishConfig.localConfig) {
            const localConfig = require(path_1.resolve(this.context.packager.appDir, config.localConfig));
            config = Object.assign({}, config, localConfig);
        }
        this.config = Object.assign({ resumable: true }, config);
        this.client = new ali_oss_1.default({
            region: config.region,
            //‰∫ëË¥¶Âè∑AccessKeyÊúâÊâÄÊúâAPIËÆøÈóÆÊùÉÈôêÔºåÂª∫ËÆÆÈÅµÂæ™ÈòøÈáå‰∫ëÂÆâÂÖ®ÊúÄ‰Ω≥ÂÆûË∑µÔºåÈÉ®ÁΩ≤Âú®ÊúçÂä°Á´Ø‰ΩøÁî®RAMÂ≠êË¥¶Âè∑ÊàñSTSÔºåÈÉ®ÁΩ≤Âú®ÂÆ¢Êà∑Á´Ø‰ΩøÁî®STS„ÄÇ
            accessKeyId: config.accessKeyId,
            accessKeySecret: config.accessKeySecret,
            bucket: config.bucket
        });
    }
    async upload(task) {
        const fileName = (this.useSafeName ? task.safeArtifactName : null) || path_1.basename(task.file);
        const os = task.packager['platform'].buildConfigurationKey || task.packager['platform'].name;
        let archName = builder_util_1.Arch[builder_util_1.Arch.x64];
        if (!task.arch && task.arch !== 0) {
            if (task.packager['platform'].nodeName.indexOf('32') >= 0) {
                archName = builder_util_1.Arch[builder_util_1.Arch.ia32];
            }
        }
        else {
            archName = builder_util_1.Arch[task.arch];
        }
        await this.doUpload(fileName, task.file, archName, os);
    }
    async doUpload(fileName, filePath, archName, os) {
        console.log('doUpload', fileName, filePath, archName, os);
        const config = this.config;
        const appInfo = this.context.packager.appInfo;
        let uploadName = fileName;
        if (config.path) {
            uploadName = config.path
                .replace(/\${name}/g, appInfo.name)
                .replace(/\${os}/g, os)
                .replace(/\${arch}/g, archName)
                .replace(/\${filename}/g, fileName);
        }
        this.context.cancellationToken.createPromise(async (resolve, reject) => {
            const { resumable } = this.config;
            const maxResume = this.config.maxResume || 5;
            let checkpoint;
            try {
                for (let i = 0; i < (resumable ? maxResume : 1); i++) {
                    // try to resume the upload
                    console.log(`${uploadName}: uploading...üïë `);
                    const result = await this.client.multipartUpload(uploadName, filePath, {
                        progress: async (percentage, cpt) => {
                            checkpoint = cpt;
                            if (this.config.verbose && cpt) {
                                console.log(`${uploadName}: ${cpt.doneParts.length}\/${Math.ceil(cpt.fileSize / cpt.partSize)}(${(percentage * 100).toFixed(2)}%)`);
                            }
                        },
                        checkpoint: checkpoint,
                        meta: {}
                    });
                    resolve(result);
                    console.log(`${uploadName}: upload success...‚úÖ `);
                    break; // break if the upload success;
                }
            }
            catch (e) {
                // ÊçïËé∑Ë∂ÖÊó∂ÂºÇÂ∏∏
                if (e.code === 'ConnectionTimeoutError') {
                    console.error("Woops,Timeout!");
                    // do ConnectionTimeoutError operation
                }
                console.error(e);
            }
        });
    }
    toString() {
        return `${this.providerName}(${this.config.bucket})`;
    }
}
exports.default = AliOssPublisher;
//# sourceMappingURL=index.js.map
